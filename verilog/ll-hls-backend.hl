% literate:

\section{Verilog backend}

\pfcode{
function ll_to_hls_lower_ashr(top) {
   gettypewidth(tp) =
      visit:hls3 /rec/ (type: tp) {
         once type {
            v -> bits}};
   getconstant(v) =
      visit:hls3 /rec/ (value: v) {
         once value {
            const -> v
          | else -> ccerror('NOT-ALLOWED'())}};
   mkconst(c) =
     with target(hls3) {
        mk:value:const(c, mk:v(32))};
   visit:hls3 /rec/ (top: top) {
      deep expr {
         op -> if (fn === 'AShr') {
           tpw = gettypewidth(rettype);
           swdth = getconstant(cadr(args));
           highbit = tpw - 1;
           count = swdth;
           mk:op('compose', [mk:value:e(mk:op('repeat', [mkconst(count);
                                        mk:value:e(mk:op('range',
                                            [car(args);mkconst(highbit);
                                                       mkconst(highbit)], rettype))], rettype));
                             mk:value:e(mk:op('range', [car(args);mkconst(tpw-1);mkconst(swdth)], rettype))],
                            rettype)
         } else node()
       | else -> node()}}}}

\pfcode{
function ll_to_hls3_lower_selectchains(top) {
   visit:hls3 /rec/ (top: top) {
      deep selectelt { e -> [c;v] };
      deep expr {
         selectchain -> do loop(e = es) {
            match e with
              [[cnd;vl]] -> mk:v(vl)
            | [[cnd;vl];@rest] -> mk:select(cnd, vl, mk:e(loop(rest)))}
       | else -> node()}}}}

\pfcode{
function ll_to_hls_hls3_to_verilog(top0) {
   top = ll_to_hls3_lower_selectchains(top0);
   s(x) = %S<<(x);
   classop(op) = {
      match op with
         'Add' -> 'binop':"+"
       | 'Sub' -> 'binop':"-"
       | 'NOT' -> 'unop':"!"
       | 'Shl' -> 'binop':"<<"
       | 'AShr' -> 'sbinop':">>>"
       | 'LShr' -> 'binop':">>"
       | 'EQ' -> 'binop':"=="
       | 'NE' -> 'binop':"!="
       | 'SGE' -> 'sbinop':">="
       | 'SGT' -> 'sbinop':">"
       | 'SLT' -> 'sbinop':"<"
       | 'SLE' -> 'sbinop':"<="
       | 'And' -> 'binop':"&"
       | 'Or' -> 'binop':"|"
       | 'ZExt' -> 'convop':op
       | 'Trunc' -> 'convop':op
       | 'compose' -> 'compose':op
       | 'range' -> 'range':op
       | 'repeat' -> 'repeat':op
       | else -> 'nope':""
   };
   mkop(op, args, t) = {
      <cls:sym> = classop(op);
       match cls with
          'binop' -> ["("; car(args); ") "; sym; "  (";cadr(args);")"]
        | 'sbinop' -> ["$signed(";car(args); ") "; sym; " $signed(";cadr(args); ")"]
        | 'unop' -> [sym; "("; car(args); ")"]
        | 'convop' -> car(args) // TODO: proper z-ext
        | 'compose' -> ["{"; interleave(args, ", "); "}"]
        | 'repeat' -> ["{"; car(args); "{"; cadr(args) ; "}}"]
        | 'range' -> [car(args); "["; cadr(args); ":"; caddr(args); "]"]        
        | else -> [s(op); "(...)"]
   };
   visit:hls3 /rec/ (top: top) {
      deep modarg {
         ain -> ["input "; tp; " "; s(nm)]
       | aoutreg -> ["output reg "; tp; " "; s(nm)]
       | aout -> ["output "; tp; " "; s(nm)]};
      deep modentry {
         register -> ["reg "; t; " "; s(nm); ";"; 'FORCECR']
       | wire -> ["wire ";t; " "; s(nm); ";"; 'FORCECR']
       | always -> ["always @(posedge clk)"; 'PUSHTAB'; 'FORCECR';
                         s;
                         'POP';
                         'FORCECR']
       | assign -> ["assign "; s(nm); " = "; 'PUSHTAB'; v; 'POP'; ";"; 'FORCECR']
       | ram -> ['FORCECR';
                 "hlsblockram "; "#("; 'PUSHSTOP';
                                       ".BITWIDTH("; s(w); "),";'FORCECR';
                                       ".SIZE("; s(size); ")"; 'POP';") ";
                 s(id); " (";'PUSHSTOP';
                 ".clk(clk),";'FORCECR';
                 ".readaddr1(";readaddr1;"),";'FORCECR';
                 ".readout1("; readout1; "),";'FORCECR';
                 ".writeaddr1("; writeaddr1; "),";'FORCECR';
                 ".writein1("; writein1; "),";'FORCECR';
                 ".we("; we; ")";'POP';");"; 'FORCECR']
       | inst -> ['FORCECR';
                  %S<<("hls_", fn);
                  // TODO: parameters
                  " "; s(id); " ("; 'PUSHSTOP';
                  @interleave(map p in ps do p, [", ";'FORCECR']);
                  'POP';
                  ");"; 'FORCECR']
       | else -> [] // TODO!
      };
      deep instport {
         p -> [".";s(nm);"(";v;")"]};
      deep case {
         d -> [v; ": "; 'PUSHSTOP'; s; 'POP']};
      deep stmt {
         if -> ["if ("; 'PUSHSTOP'; e; 'POP'; ")"; 'PUSHTAB'; 'FORCECR';
                    tr; 'FORCECR';
                 'TABBACK';"else"; 'FORCECR';
                    fl; 'POP'; 'FORCECR']
       | display -> [%S<<("$display(\"", text, "\", "); interleave(args, ", "); ");"]
       | set -> [s(reg); " <= "; v; ";"; 'FORCECR']
       | switch -> ["case ("; id; ")"; 'PUSHTAB'; 'FORCECR';
                       interleave(cs, ['FORCECR']);
                     'POP'; 'FORCECR'; "endcase"; 'FORCECR']
       | begin -> if(ss) ["begin"; 'PUSHTAB'; 'FORCECR'; interleave(ss, ['FORCECR']); 'POP'; 'FORCECR';
                          "end"] else []
       | store -> ["/* STORE "; s(mem); "["; idx; "]="; v; " */"]
       | load_start -> ["/* LOAD_START "; s(mem); "["; off; "] */"]
       | nop -> []
       | else -> "..." };
      deep expr {
         v -> v
       | op -> mkop(fn, args, rettype)
       | convop -> mkop(fn, [arg], t)
       | select -> ["("; cnd; ")?"; "(";tr;"):("; fl;")"]
       | selectchain -> ccerror('IMPOSSIBLE'())
       | load_commit -> ["/* LOAD_COMMIT "; s(mem); ", "; s(reg); " */"]
       | else -> "..." };
      deep value {
         const -> s(v) // TODO!
       | undef -> "0"
       | reg -> s(id)
       | e -> e};
      deep type {
         v -> if(bits==1) "" else ["["; s(bits-1); ":0]"]
      };
      deep ram {
         else -> [] // TODO!
      };
      deep top {
         module -> [
             "module "; s(nm); "(";'PUSHSTOP'; interleave(args, [","; 'FORCECR']); 'POP'; ");";
             'PUSHTAB';
             'FORCECR';
                rams;
                es;
             'POP'; 'FORCECR';
             "endmodule"; 'FORCECR']}}}}
\pfcode{
define hls_ll_env = ll_mk_env(hls_select_passes)
}

\pfcode{
function ll_genssa_alt_opt(globenv, llenv, src, addpragma) {
   g2 = ll_to_genssa2(src);
  <g3ht:g3> = genssa2_process(llenv, globenv, g2);
   g4 = genssa2_to_ll(src, g3, g3ht);
   g0 = genssa2_loops(g3);
   g5 = ll_clean_pragmas(addpragma, g4);
   return g0:g3ht:g5
}}
 
\pfcode{
function prep_hls(devenv, env, path, fn, fnm) collector(addpragma, getpragmas) {
  // ohashput(hls_ll_env, '*debug-compiler-ssa*', 1);
  // ohashput(hls_ll_env, '*debug-compiler-ssa-timing*', 1);
  // 1. Run the HLS compiler backend for this function and generate
  //    a Verilog module (current path + function name ".v")
 <loops:g2tp:g2> = ll_genssa_alt_opt(env, hls_ll_env, fn, addpragma);
  pragmas = getpragmas();
  g3 =  ll_to_hls_driver(devenv, g2, pragmas, loops);
  g3x = g3;// ll_to_hls_lower_ashr(g3);
  %call-with-output-file(%S<<(fnm, ".v"), fun(fout)
         %generic_pprint:pprint(ll_to_hls_hls3_to_verilog(g3x), fun(x) fprint(fout, x)));

  // 2. Generate an inline interface function with the same name and pass
  //    it back to the Small1 backend.
  ret = visit:ir2(irtoplevel: fn) {
    once irtoplevel {
      %function -> {
         cbody = if (filter cc as match cc with 'nowrap'() -> true)
                      inline_wrapper_dummy(path, fnm, args)
                 else inline_wrapper_body(path, fnm, args);
         nbody =  map r in cbody do ir0_ir2_bblock(r);
         mk:node(cc = [], annotations = ['inline'()], body =  nbody)}
      |  else -> ccerror('WHAT'(fn))}};
  return ret}}


\pfcode{
define hls_dev_environments = mkhash()
function hls_devenv(arch, subarch) {
  fn = ohashget(hls_dev_environments, arch);
  return fn(subarch)
}}

%%%%