%literate:

\phcode{include "./extra.hl"}

\subsection{Driver}

\pfcode{
define ll_hls_config_ramsignals = mkref([])
}

\pfcode{
function ll_to_hls_expand_commits(top) {
  commits = mkhash();
  mkcommits() = {
     add(id, v) = ohashput(commits, id, v:ohashget(commits, id));
     visit:hls2 /rec/ (top: top) {
       deep expr {
         op_commit -> (match cycles with
                          'd'(@_) -> add(stage, %Sm<<(inst, "_ack")))
       | else -> []}}};
  mkcommits();
  visit:hls2 /rec/ (top: top) {
    deep fsmstage  {
         stage ->  {
            acks = ohashget(commits, name);
            if (acks) symbols(accnm, accnext) {
               mk:node(startcnd = [[accnm; accnext; acks]],
                       body = [
                          mk:stmt:waitcommits(accnm, accnext, acks, mk:stmt:begin(ss = body))])}
            else node()}}}}}

\pfcode{
function ll_to_hls_fill_op_starts(top) {
  stagestarts = mkhash();
  mkstagestarts() =
       visit:hls2 /rec/ (top: top) {
          deep fsmstage{
             stage -> ohashput(stagestarts, name, startcnd)}};
  mkstagestarts();
  getstagestart(name) =
    aif(chk = ohashget(stagestarts, name)) car(chk) else [];
  dofsmstage(thisstage, s) =
    visit:hls2 /rec/ (fsmstage: s) {
      deep stmt {
         op_start  -> (match cycles with
                        'd'(nc) -> mk:node(cycles = 'd'(nc, getstagestart(thisstage)))
                       | else -> node())
      |  else -> node()}};
  visit:hls2 /rec/ (top: top) {
     deep fsmstage {
        stage -> dofsmstage(name, node())}}}}

\pfcode{
function ll_to_hls_zero_ack_regs(top) {
  // 1. Build a CFG
  cfg = mkhash(); cnds = mkhash();
  dofsmstage(thisstage, s) =
     visit:hls2 /rec/ (fsmstage: s) {
        deep stmt {
           goto -> ohashput(cfg, stage, thisstage) // do not care if more than one incoming edges
         | else -> []}};
  fillcfg() = visit:hls2 /rec/ (top: top) {
     deep fsmstage  { stage -> {
           if(startcnd) ohashput(cnds, name, car(startcnd));
           dofsmstage(name, node()) }}};
  fillcfg();
  // 2. Inject initialisation
  cndregs = mkhash();
  hashiter(fun(to, from)
            aif(cc = ohashget(cnds, to)) {
              <[accnm;accnext;acks]> = cc;
               if (length(acks)>1)
                  ohashput(cndregs, from, accnm)
            } else [], cfg);
  getcndreg(name) = ohashget(cndregs, name);
  visit:hls2 /rec/ (top: top) {
     deep  fsmstage {
        stage -> {
           aif (cndreg = getcndreg(name)) {
              // TODO: use a special node, because this register does not exist yet
              mk:node(body = mk:stmt:set(cndreg, mk:v(mk:const(0, mk:v(32)))):body);
           }  else node()}}}}}

\pfcode{
function ll_to_hls_lower_fsm(top) {
  dopipelinebody(addm, pipeid, body) = {
     visit:hls3 /rec/ (stmt: body) {
          deep stmt {
             load_start -> mk:stmt:load_start_p(pipelineid = pipeid)
           | else -> node()}}};
  dofsmbody(stagereg, tp, ssmap, body) = {
     dofsmstage(thisstage, s) = {
       visit:hls3 /rec/ (stmt: s) {
          deep stmt {
             goto -> mk:set(stagereg, mk:v(mk:const(ohashget(ssmap, stage), tp)))
           | load_start -> mk:stmt:load_start_x(stagereg = stagereg, stage=thisstage)
           | store -> mk:stmt:store_x(stagereg = stagereg, stage=thisstage)
           | op_start -> {
                match cycles with
                    'd'(nc, stagestart) ->
                       mk:node(cycles = 'd'(nc, stagereg, thisstage, stagestart))
                  | else -> node()}
           | else -> node()}}};
     visit:hls3 /rec/ (case: body) {
        once case {
           d -> mk:node(s = dofsmstage(v, s))}}};
  bit = with target (hls3) {mk:type:v(1)};
 <outputsht:ntop> = ll_to_hls_extend_outputs(top);
  visit:hls2 /rec, dst hls3/ (top: ntop) {
     deep top {
        module -> mk:module(args = [mk:ain('clk',bit);
                                    mk:ain('reset',bit);
                                    @args],
                            es = map append es do es)};
     deep fsmstage {
        stage -> [name;
                  fun(idx, tp) {
                    mk:case:d(mk:const(idx,tp), mk:begin(body))}]};
     deep modentry {
        xfsm -> collector(addm, getm) {
                  stagereg = gensym();
                  ssmap = mkhash();
                  iter [nm;body] in ss count i do
                               ohashput(ssmap, nm, i);
                  nstages = length(ss);
                  nbits = /*TODO!!!*/ 32;
                  nbitstp = mk:type:v(nbits);
                  addm(mk:modentry:register(nbitstp, stagereg));

                  fsmreset = mk:stmt:begin([
                                  mk:set(stagereg, mk:v(mk:const(0, nbitstp)));
                                  reset
                             ]);
                  fsmbody = map [nm;body] in ss do
                                dofsmbody(stagereg, nbitstp, ssmap,
                                          body(ohashget(ssmap, nm), nbitstp));
                  ret = mk:modentry:always(
                              mk:if(mk:op('NOT',[mk:reg('reset')], mk:v(32)),
                                    fsmreset,
                                    mk:switch(mk:v(mk:reg(stagereg)), mk:begin([]),
                                              fsmbody)
                                    ));
                  return [@getm(); ret]}
      | xpipeline -> collector(addm, getm) {
          nbody = dopipelinebody(addm, nm, body);
          [
           mk:modentry:always(
             mk:if(mk:op('NOT',[mk:reg('reset')], mk:v(32)),
                                     reset, nbody))]}
      | special ->
          ll_to_hls_unroll_enqueue(outputsht, v)
      | else -> [node()]};
  }}}


\pfcode{
function ll_to_hls_lower_mems(aenv, top) {
  // 1. Collect allocas from the *RAMS* list.
  //    Lift the address, value and WE wires.
  //    Lift the ram instances
  rs = map append r in ohashget(aenv, '*RAMS*') do
          match r with
             [id; alloca([tp; sz],@varname)] -> [[id; sz; ll_to_hls_gettype(tp);@varname]]
           | else -> [];
  i32 =  with target (hls3) {mk:type:v(32)};
  ramsh = mkhash();
  getmodname(t) = visit:hls3 /rec/ (top: t) { once top { module -> nm | else -> []}};
  modnm = getmodname(top);
  getsize(t) = visit:hls3 /rec/ (type: t) {once type { v -> bits }};
  outersignals = mkref([]);
 <[newtops;newsignals]> =
   collector(addelt, getelts)
   collector(addsig, getsigs) {
    iter [id;sz;w;@varname] in rs do with target (hls3)
    symbols(readaddr1, readout1, writeaddr1, writein1, we, twriteaddr1, twritein1, twe) {
       ohashput(ramsh, id, [[w; i32]; [readaddr1; readout1]; [writeaddr1; writein1]; we]);
       addelt(mk:modentry:wire(w, readout1));
       addelt(mk:modentry:wire(w, writein1));

       // TODO: calculate address bit width
       addelt(mk:modentry:wire(i32, readaddr1));
       addelt(mk:modentry:wire(i32, writeaddr1));
       addelt(mk:modentry:wire(mk:v(1), we));

       if (varname) symbols (twriteaddr1, twritein1, twe) {
         vn = car(varname);
         outer_we = %Sm<<("array_", vn, "_we");
         outer_writeaddr = 'array_addr';
         outer_writein = 'array_data';
         addelt(mk:modentry:wire(w, twritein1));
         addelt(mk:modentry:wire(i32, twriteaddr1));
         addelt(mk:modentry:wire(mk:v(1), twe));

         if (^ll_hls_config_ramsignals) {

           if (not(^outersignals)) {
             // TODO: data width must be the maximum of all array widths
             addsig(mk:modarg:ain(outer_writein, w));
             addsig(mk:modarg:ain(outer_writeaddr, i32));
             outersignals := 1;
             ll_hls_md_register_ram(modnm, vn, [[outer_writein;w];[outer_writeaddr;i32];  
                                                [outer_we;mk:type:v(1)]]);
           } else {
             ll_hls_md_register_ram(modnm, vn, [[outer_we;mk:type:v(1)]]);
           };
           addsig(mk:modarg:ain(outer_we, mk:v(1)));

           addelt(mk:modentry:assign(twriteaddr1,
                                   mk:e(mk:select(mk:reg(outer_we),
                                                  mk:reg(outer_writeaddr),
                                                  mk:reg(writeaddr1)))));
           addelt(mk:modentry:assign(twritein1,
                                   mk:e(mk:select(mk:reg(outer_we),
                                                  mk:reg(outer_writein),
                                                  mk:reg(writein1)))));
           addelt(mk:modentry:assign(twe,
                                   mk:e(mk:select(mk:reg(outer_we),
                                                  mk:reg(outer_we),
                                                  mk:reg(we)))));
         } else {

           addelt(mk:modentry:assign(twriteaddr1,
                                   
                                                  mk:reg(writeaddr1)));
           addelt(mk:modentry:assign(twritein1,
                                                  mk:reg(writein1)));
           addelt(mk:modentry:assign(twe,
                                                  mk:reg(we)));
         };

         addelt(mk:modentry:ram(id, getsize(w), sz,
                       mk:reg(readaddr1),
                       mk:reg(readout1),
                       mk:reg(twriteaddr1),
                       mk:reg(twritein1),
                       mk:reg(twe)));
       } else {
         addelt(mk:modentry:ram(id, getsize(w), sz,
                     mk:reg(readaddr1),
                     mk:reg(readout1),
                     mk:reg(writeaddr1),
                     mk:reg(writein1),
                     mk:reg(we)));
       }
    };
    return [getelts();getsigs()]};
  // 2. Collect _start operations, assuming there is only one in each fsm stage.
  collectstarts(t) = collector(addx, getx) {
     visit:hls3 /rec/ (top: t) {
        deep stmt {
             load_start_x -> addx('load'(stagereg, stage, mem, reg, off))
           | load_start_p -> addx('loadp'(pipelineid, mem, reg, off))
           | store_x -> addx('store'(stagereg, stage, mem, idx, v))
           | else -> []}};
     return getx()};
  ss = collectstarts(top);
  ramaddrs = mkhash(); ramwes = mkhash();
  newtops1 = collector(addt, getts) {
     iter r in ss do with target(hls3) {
       match r with
          load(stagereg, stage,mem,reg, off) -> {
            <[[w; wa]; [readaddr1; readout1]; [writeaddr1; writein1]; we]> = ohashget(ramsh, mem);
             addt(mk:modentry:wire(wa, reg));
             addt(mk:modentry:assign(reg, mk:e(off)));
             ohashput(ramaddrs, mem, [stagereg;stage;reg]:ohashget(ramaddrs, mem));
          }
        | loadp(pipe, mem, reg, off) -> {
             println('LOADp:'(r));
            <[[w; wa]; [readaddr1; readout1]; [writeaddr1; writein1]; we]> = ohashget(ramsh, mem);
             // assign a load port directly; todo: multiple ports
             addt(mk:modentry:assign(readaddr1, mk:e(off)));
          }
        | store(stagereg, stage, mem, idx, v) -> {
            <[[w; wa]; [readaddr1; readout1]; [writeaddr1; writein1]; we]> = ohashget(ramsh, mem);
             reg = %Sm<<(gensym(), "_", mem);
             regaddr = %Sm<<(reg, "_addr");
             regvin  = %Sm<<(reg, "_vin");
             addt(mk:modentry:wire(wa, regaddr));
             addt(mk:modentry:wire(w, regvin));
             addt(mk:modentry:assign(regaddr, mk:e(idx)));
             addt(mk:modentry:assign(regvin, mk:e(v)));
             ohashput(ramwes, mem, [stagereg; stage;regaddr;regvin]:ohashget(ramwes, mem))}};
     return getts()};
  // 3. Lift the assign statements mux-ing addresses and values on the FSM stages.
  newtops2 = collector(addt, getts) {
     hashiter(fun (mem, xs) with target(hls3) {
                rs = map [stagereg;stage;reg] in xs do {
                   mk:selectelt:e(
                    mk:value:e(mk:expr:op('EQ', [mk:reg(stagereg);stage], mk:v(32))),
                    mk:value:reg(reg))};
               <[[w; wa]; [readaddr1; readout1]; [writeaddr1; writein1]; we]> = ohashget(ramsh, mem);
                addt(mk:modentry:assign(readaddr1, mk:value:e(mk:selectchain(rs))))
              }, ramaddrs);
     return getts()};
  newtops3 = collector(addt, getts) {
       hashiter(fun (mem, xs) with target(hls3) {
                   bit = mk:type:v(1);
                   zeroop = mk:selectelt:e(mk:const(1, bit), mk:const(0, bit));
                   rs0 = map [stagereg; stage; regaddr; regvin] in xs do {
                           op = mk:value:e(mk:expr:op('EQ', [mk:reg(stagereg);stage], mk:v(32)));
                           [mk:selectelt:e(op, mk:value:reg(regaddr));
                            mk:selectelt:e(op, mk:value:reg(regvin));
                            mk:selectelt:e(op, mk:const(1, bit))]};
                   rs = map [a;b;c] in rs0 do a;
                   vs = map [a;b;c] in rs0 do b;
                   ws = map [a;b;c] in rs0 do c;
                  <[[w; wa]; [readaddr1; readout1]; [writeaddr1; writein1]; we]> = ohashget(ramsh, mem);
                   addt(mk:modentry:assign(writeaddr1, mk:value:e(mk:selectchain(rs))));
                   addt(mk:modentry:assign(writein1,   mk:value:e(mk:selectchain(vs))));
                   addt(mk:modentry:assign(we,         mk:value:e(mk:selectchain(ws::[zeroop]))))},
                ramwes);
     return getts()};
  // TODO: same shit for the stores
  println('NEWTOPS1='(newtops1));
  println("========");
  // 4. Rewrite the rest, removing all the _start operations and replacing _commits with
  //    the corresponding output wires.
  tmppp=gen_pprint_ast(hls3, top);
  println(tmppp(top));
  println("-----------------_");
  visit:hls3 /rec/ (top: top) {
     deep top {
        // TODO: reorder, add after all the existing wires
        module -> mk:node(args = args :: newsignals, es =  newtops ::  newtops1 ::  newtops2 :: newtops3 :: es)};
     deep stmt {
        load_start_x -> mk:nop()
      | load_start_p -> mk:nop()
      | store_x -> mk:nop()
      | else -> node()};
     deep expr {
        load_commit -> {
          <[[w; wa]; [readaddr1; readout1]; [writeaddr1; writein1]; we]> = ohashget(ramsh, mem);
           return mk:v(mk:reg(readout1))}
      | else -> node()}}}}

\pfcode{
function ll_to_hls3_lower_insts(top) {
   // Extract all the op_start statements and replace them with module instances.
   // Replace all the op_commit expressions with dummy wires.
   getinsts() =
    collector(add, get) {
      visit:hls3 /rec/ (top: top) {
         deep stmt {
            op_start ->
               add('op'(inst, fn, cycles, args, tp))
          | else -> []}};
      return get()};
   insts = getinsts();
   pow2(b) = notnet(int b) {leave 1<<b;};
   mkones(num) = with target (hls3) {
     mk:value:const( pow2( num ) - 1, mk:v(num) )};
   makestageexpr(stagereg, stage, stagestart) =
     with target(hls3) {
         e1 = mk:expr:op('EQ', [mk:reg(stagereg);stage], mk:v(1));
         match stagestart with
            [accnm;accnext;acks]  -> {
               e2 = if(length(acks) == 1) mk:expr:v(mk:reg(car(acks)))
                    else mk:expr:op('EQ', [mk:reg(accnext);mkones(length(acks))],
                            mk:v(1));
               mk:expr:op('And', [mk:value:e(e1); mk:value:e(e2)], mk:v(1))
            }
          | else -> e1};
   collector(addwire, getwires)
   collector(addinst, getinsts)
    { with target (hls3) {
      iter 'op'(inst, fn, cycles, args, tp) in insts do {
         reqack = (match cycles with 'd'(nc, stagereg, stage, stagestart) ->  {
                         ackwire = %Sm<<(inst, "_ack");
                         addwire(mk:modentry:wire(mk:v(1), ackwire));
                         stageexpr = makestageexpr(stagereg, stage, stagestart);
                         [ mk:instport:p('req', stageexpr);
                           mk:instport:p('ack', mk:v(mk:reg(ackwire)))]}
                    | else -> []);
         addwire(mk:modentry:wire(tp, %Sm<<(inst, "_out")));
         depth = ohashget(ll_hls_feedback, %Sm<<(fn, " -- PIPELINE DEPTH"));
         if (depth) {
           defargs = ohashget(ll_hls_feedback, %Sm<<(fn, " -- MODARGS"));
           defargsin = (map append a in defargs do match a with ain(@_) -> [a]
                             | else -> []);
           defargsout = (map append a in defargs do match a with aoutreg(@_) -> [a]
                             | else -> []);
           defargsoutreg = match defargsout with [aoutreg(nm,@_);@_] -> nm | else -> ccerror('NO-OUTPUT-SIGNAL-IN-MODULE'(fn));
           addinst(
            mk:modentry:inst(inst, fn, [],
                          [mk:instport:p('clk', mk:v(mk:reg('clk')));
                           mk:instport:p('reset', mk:v(mk:reg('reset')));
                           @reqack;
                           @map [a;ain(da, dw)] in zip(args, defargsin) do {
                             mk:instport:p(da, a)
                            };
                           mk:instport:p(defargsoutreg, mk:v(mk:reg(%Sm<<(inst, "_out"))))]))
         } else 
          addinst(
            mk:modentry:inst(inst, %Sm<<("hls_", fn), [],
                          [mk:instport:p('clk', mk:v(mk:reg('clk')));
                           mk:instport:p('reset', mk:v(mk:reg('reset')));
                           @reqack;
                           @map a in args count i do {
                             mk:instport:p(%Sm<<("p", i), a)
                            };
                           mk:instport:p('out', mk:v(mk:reg(%Sm<<(inst, "_out"))))]))}};
     newwires = getwires();
     newinsts = getinsts();
     visit:hls3 /rec/ (top: top) {
       deep top {
          module -> mk:node(es = newwires :: es :: newinsts)};
       deep expr {
          op_commit ->
             mk:v(mk:reg(%Sm<<(inst, "_out")))
        | else -> node()};
       deep stmt {
          op_start -> mk:nop()
        | else -> node()}}}}}


\pfcode{
function ll_to_hls3_lower_waitacks(top) {
   // Make a vector of ones of a given length
   pow2(b) = 
     notnet(int b)
        {leave 1<<b;};
   mkones(num) = with target (hls3) {
      mk:value:const( pow2( num ) - 1, mk:v(num) )};
   mkbits(lst) = with target (hls3) {
      mk:expr:op('compose', map l in lst do
                                mk:value:reg(l), mk:v(length(lst)))};
   collector(addtop, gettops) {
     visit:hls3 /rec/ (top: top) {
       deep top {
           module -> mk:node(es = gettops()::es) };
       deep stmt {
           waitcommits -> {
             if (length(acks) == 1) {
               mk:if(mk:v(mk:reg(car(acks))),
                     body, mk:begin(ss = [mk:stmt:nop()]))
             } else {
               addtop(mk:modentry:register(mk:v(length(acks)), accnm));
               addtop(mk:modentry:wire(mk:v(length(acks)), accnext));
               addtop(mk:modentry:assign(accnext,
                          mk:e(mk:op('Or', [mk:reg(accnm);
                                            mk:e(mkbits(acks))],
                                      mk:v(length(acks))))));
               mk:if(mk:op('EQ', [mk:reg(accnext);mkones(length(acks))],
                           mk:v(1)),
                     body,
                     mk:set(accnm, mk:v(mk:reg(accnext))))
            }}
       | else -> node()}}}}}

\pfcode{
function ll_to_hls3_sort_decls(top) {
  // Move all the regs and wires above all the assignments, rams and always
  collector(addregwire, getregwires)
  collector(addram, getrams)
  collector(addass, getass)
  collector(addother, getothers) {
    visit:hls3 /rec/ (top: top) {
      deep top {
         module -> mk:node(es = getregwires() :: getrams() :: getass() :: getothers())};
      deep modentry {
         register -> addregwire(node())
       | wire -> addregwire(node())
       | assign -> addass(node())
       | ram -> addram(node())
       | else -> addother(node())}}}}}


\pfcode{
function ll_to_hls_pragma_function(fn, bb, args) {
   if (fn === '_pragma_hls_pipeline') {
     stepid = (match car(args) with
                  'var'(id) -> id
                | x -> ccerror('WRONG_STEP'(x)));
     step = with target (hls0) {
        match cadr(args) with
           'var'(id) -> mk:value:reg(id)
         | 'integer'(v,@_) -> mk:value:const(v, mk:v(32))
         | x -> ccerror('WRONG_STEP'(x))};
     fun(aenv, top, loops) {
        ll_to_hls_simple_pipeline(aenv, top, bb, stepid, step)
     }
   } else if (fn === '_pragma_hls_pipeline_loop'  || fn === '_pragma_hls_pipeline_loop_oc') {
     stepid = (match car(args) with
                  'var'(id) -> id
                | x -> ccerror('WRONG_STEP'(x)));
     step = with target (hls0) {
        match cadr(args) with
           'var'(id) -> mk:value:reg(id)
         | 'integer'(v,@_) -> mk:value:const(v, mk:v(32))
         | x -> ccerror('WRONG_STEP'(x))};
     stepinstrs = { // for now let's assume all the instructions prior to pragma call are step-retaled
         []
     };
     fun(aenv, top, loops) {
        ll_to_hls_loop_pipeline(aenv, top, bb, stepid, step, loops, fn === '_pragma_hls_pipeline_loop_oc' /*onecyclep*/)
     }
   } else if (fn === '_pragma_hls_bare_pipeline') {
     fun(aenv, top, loops) {
        ll_to_hls_bare_pipeline(aenv, top, bb)
     }
   }
}}

\pfcode{
function ll_to_hls_do_pragmas(aenv, top, pragmas, loops) {
   foldl(fun(t, p) {
            match p with
              [bb;loc;'call'(fn,@args)] -> {
                 println('PRAGMA'(p));
                 pfn = ll_to_hls_pragma_function(fn, bb, args);
                 if (pfn) pfn(aenv, t, loops) else t}
            | else -> t}, top, pragmas)}}

\pfcode{
function ll_to_hls_is_pipelined(aenv, pragmas) {

   is_pragma_pipe(fn) =
     (fn === '_pragma_hls_pipeline') ||
     (fn === '_pragma_hls_pipeline_loop') ||
     (fn === '_pragma_hls_pipeline_loop_oc') ||
     (fn === '_pragma_hls_bare_pipeline') ;
      
   foldl(fun(a,p) {
           match p with
              [bb;loc;'call'(fn,@args)] ->
                 (a || is_pragma_pipe(fn))
            | else -> a}, [], pragmas)}}

\pfcode{
function ll_to_hls_is_bare(aenv, pragmas) {

   is_pragma_pipe(fn) =
     (fn === '_pragma_hls_bare_pipeline') ;
      
   foldl(fun(a,p) {
           match p with
              [bb;loc;'call'(fn,@args)] ->
                 (a || is_pragma_pipe(fn))
            | else -> a}, [], pragmas)}}


\pfcode{
function ll_to_hls_driver(devenv, top0, pragmas, loops) {
   top = ll_to_hls_prep_geps(top0);
   typeenv0 = ll_module_types([]);
   types = ll_propagate_types_fun(typeenv0, top);
   aenv = ll_to_hls_prep_memories(top);
   phirenames = mkhash();
   pipelined_p  = ll_to_hls_is_pipelined(aenv, pragmas);
   bare_p  = ll_to_hls_is_bare(aenv, pragmas);
   bbs = collector(addbb, getbbs) {
      visit:ir2 (irtoplevel: top) {
         once irbblock {
            bblock -> {
               bbs = ll_to_hls_bbs_prep(devenv, aenv, node, types, phirenames, pipelined_p);
               iter b in bbs do
                  addbb(ll_to_hls_bb_split(aenv, b, types))}}};
      getbbs()};
   getram(nm,t, dims) =
      with target(hls0) {
         mk:ram:r(nm, ll_to_hls_gettype(t), dims)
      };
   nrams = map append r in ohashget(aenv, '*RAMS*') do {
            match r with
              [nm;alloca([t;@dims],@varname)] -> [getram(nm, t, dims)]
            | else -> []};
   makearg(nm, tp) = 
      visit:ir2 (irtype: tp) {
         once irtype {
            pointer -> with target(hls0) { mk:modarg:aoutreg(nm, ll_to_hls_gettype(t)) }
          | integer -> with target(hls0) { mk:modarg:ain(nm, ll_to_hls_gettype(tp)) }
          | float -> with target(hls0) { mk:modarg:ain(nm, ll_to_hls_gettype(tp)) }
          | else -> ccerror('WTF?'(tp))}};
   t1b = visit:ir2 (irtoplevel: top) {
      deep irtoplevel {
         %function -> with target(hls0) {
            nargs = map [tp;nm] in args do makearg(nm, tp);
            mk:top:module(nm = name,
                          rams = nrams, 
                          args = nargs,
                          body = bbs)}
       | else -> ccerror('WTF'())}};
   t1c = ll_to_hls_rename_phis(t1b, phirenames);

   ////////////////////////
   tmppp=gen_pprint_ast(hls0, bblock);
   prnt(t) = visit:hls0 /rec/ (top: t) {
     once bblock { else -> println(tmppp(node())) }};
   //println("---------------------------------T2c");
   //prnt(t1c);
   //println("---------------------------------");
   ////////////////////////


   t2  = ll_to_hls_mark_registers(aenv, t1c);
   println("---------------------------------PRE-T200tmp");
   prnt(t2);
   println("---------------------------------");
   
   t2a = ll_to_hls_mark_output(aenv, t2);
   println("---------------------------------PRE-T2ztmp");
   prnt(t2a);
   println("---------------------------------");

   t2aa = ll_to_hls_lift_wires(t2a, 'nophis');
   //println("---------------------------------LIFT");
   //prnt(t2aa);
   //println("---------------------------------");

   t2x1 = ll_to_hls_do_pragmas(aenv, t2aa, pragmas, loops);

   t2x = ll_to_hls_lift_wires(t2x1, 'phis');

   //println("---------------------------------T2x");
   //prnt(t2x);
   //println("---------------------------------");

   h2  = ll_to_hls_explicit_fsms(aenv, t2x);
   //prnt1=gen_pprint_ast(hls1, top);
   //println(prnt1(h2));
   h3  = ll_to_hls_remove_phis(h2);

   h4  = ll_to_hls_lower_hls1(h3, bare_p);

   h4x = h4;//if (pragmas) h4 else ll_to_hls_opt_registers(aenv, h4); // TODO!!!
   h4y = ll_to_hls_expand_commits(h4x);
   h4z = ll_to_hls_fill_op_starts(h4y);
   h4zz = ll_to_hls_zero_ack_regs(h4z);
   println("--------------O");
   prnt2=gen_pprint_ast(hls2, top);
   prnt3x=gen_pprint_ast(hls3, top);
   println(prnt2(h4zz));
   println("---------------------------------");
   ret0 = ll_to_hls_lower_fsm(h4zz);
   println(prnt3x(ret0));
   println("---------------------------------");
   ret2 = ll_to_hls_lower_mems(aenv, ret0);
   ret3 = ll_to_hls3_lower_insts(ret2);
   ret3x = ll_to_hls3_lower_waitacks(ret3);
   ret  = ll_to_hls3_sort_decls(ret3x);
   println("--------------OZ");
   prnt3=gen_pprint_ast(hls3, top);
   println(prnt3(ret));
   println("---------------------------------");
   return ret}}

%%%%%%%%%%%%%%%
