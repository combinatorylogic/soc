% literate:


\section{IR legalisation for C2}

\pfcode{
define c2_enable_mul = mkref([])
define c2_enable_cmp = mkref(true)
define c2_enable_barrel = mkref(true)
}

\pfcode{
%"ir2 -> ir2"
function c2_legalise_binops(types, mdl)
{
  isone(l) = match l with integer(x,@_) -> x==1 | else -> [];
  ismul(node,alt) = if (^c2_enable_mul) node else alt;
  iscmp(node,alt) = if (^c2_enable_cmp) node else alt;
  oneinstr(lift, e) =
   visit:ir2(irexpr:e) {
    deep irexpr {
       binary -> {
         case op { // TODO: check types?
           'Mul' -> ismul(node, 'call'('_IMUL',l,r))
         | 'SDiv' -> 'call'('_ISDIV',l,r)
         | 'UDiv' -> 'call'('_IUDIV',l,r)
         | 'SRem'  -> 'call'('_ISREM',l,r)
         | 'URem'  -> 'call'('_IUREM',l,r)
         | 'Shl'   ->
              if(^c2_enable_barrel) node
              else
                if(isone(r)) node
                else 'call'('_SHL',l,r)
         | 'AShr'   ->
              if(^c2_enable_barrel) node
              else
                if(isone(r)) node
                else 'call'('_ASHR',l,r)
         | 'LShr'   ->
              if(^c2_enable_barrel) node
              else
                if(isone(r)) node
                else 'call'('_SHR',l,r)
         | else    -> node}}
     | icmp -> {
         case vcond {
           'EQ'    -> node
         | 'NE'   -> node
         | 'UGT'  -> iscmp(node, 'call'('_UGT',lhs,rhs))
         | 'SGT'  -> node
         | 'UGE'  -> iscmp(node,'call'('_UGE',lhs,rhs))
         | 'SGE'  -> iscmp(node,'call'('_SGE',lhs,rhs))
         | 'ULT'  -> iscmp(node,'call'('_ULT',lhs,rhs))
         | 'SLT'  -> node
         | 'ULE'  -> iscmp(node,'call'('_ULE',lhs,rhs))
         | 'SLE'  -> iscmp(node,'call'('_SLE',lhs,rhs))
         | else -> node}}
      | else -> node
     }};
  visit:ir2(irmodule:mdl) {
    deep irbblock {
       bblock -> mk:node(c = map append c in c do c)
    };
    deep irpair: collector(add, get) {
       lift(v) = symbols(nnm) {
         add([nnm; v]); return 'var'(nnm);
       };
       ne = oneinstr(lift, e);
       return [@get(); mk:node(e = ne)]
    };
  }
}}


\subsection{Switch legalisation}

\pfcode{
function c2_is_nearly_continuous(cases) {
  //TODO: implement some heuristics, maybe detect sub-clusters too
  return true
}}

\pfcode{
function c2_lower_switch_jumptable(addv, addbb, node) {
  // Build a static table (using an ir2x lbltable extension), emit an indirectbr

  maketable(cases, els) = {
     // Saturate the list of cases, filling the gaps with an else branch
     // N.B.: assuming cases are sorted
     satcases = collector(add,get) {
        getnum(l) = match l with integer(v, @itp) -> v 
                               | else -> ccerror('WAT'());
        gettyp(l) = match l with integer(v, @itp) -> itp 
                               | else -> ccerror('WAT'());
        diff(l,r) = {
           itp = gettyp(l);
           ln = getnum(l);
           lr = getnum(r);
           return map i in [(ln+1)..lr] do 'integer'(i, @itp)
        };
        do loop(c = cases, prev=[]) {
           match c with 
             hd:tl -> {
                if(prev) {
                  gap = diff(prev, car(hd));
                  iter i in gap do add([i;els])
                };
                add(hd); loop(tl, car(hd))}};
        return get()};
     l = caar(cases);
     r = caar(lasttail(cases));
     lbls = map [v;d] in satcases do d;
     vlus = map [v;d] in satcases do v;
     tbllabel = gensym();
     tbl = 'jumptable'(tbllabel, els,@lbls);
     return [tbllabel; tbl; unifiq(lbls); l; r]
  };
  emit_clamp_call(v,l,r) = {
     return 'call'('__jumptable_clamp', v, l, r)
  };
  visit:ir2(irterm: node) { 
    once irterm {
      switch -> symbols(idx, addrptr, addr) {
       <[tbllabel;tbl;lbls;left;right]> = maketable(cases, els);
        // clamp and shift the index; table[0] always contain 'els' label
        // never mind the call, it's going to be inlined
        addv([idx; emit_clamp_call(value, left, right)]);
        // it's important to keep the tables embedded here, they'll be
        // recalculated on inlining and other optimisations that may move
        // basic blocks (i.e., labels) around. Lifting jumptables
        // to the top level is the last thing the backend should do.
        addv([addrptr; 'getelementptr'(tbl, ['var'(idx)], 'pointer'('integer'('i32')))]);
        addv([addr; 'load'('var'(addrptr))]);
        // tbllabel is important here: labels in the jump table
        //  are relative against PC at this jump instruction location
        return 'indirectbr_jt'(tbllabel, 'var'(addr),@(els:lbls))
      }
    | else -> ccerror('WAT'())
    }
  }
}}

\pfcode{
function c2_lower_switch_tree(addv, addbb, node) {
  //TODO: implement; take sub-clusters into account
  []
}}

\pfcode{
function c2_legalise_terms_inner(code) 
collector(addbb, getbbs) {
  c0 = visit:ir2(ircode:code) {
    deep irbblock {
       bblock -> collector(addv, getv) {
          nt = t(addv);
          return mk:node(c = c::getv(), t = nt)}};
    deep irterm {
       switch -> fun(addv) { // the most naive switch lowering ever
          getval(v) = 
            visit:ir2(irval:car(v)) {
              once irval {
                integer -> v | else -> ccerror('WAT'())}};
          scases = qsort(fun(l, r) getval(l) < getval(r), cases);
          sortnode = mk:node(cases=scases);
          contp = c2_is_nearly_continuous(scases);
          if (contp) c2_lower_switch_jumptable(addv, addbb, sortnode)
            else c2_lower_switch_tree(addv, addbb, sortnode)
         }
    | else -> fun(addv) node}};
  return c0::getbbs();
}}

\pfcode{
function c2_legalise_terms(mdl)
  visit:ir2(irmodule:mdl) {
    once ircode: c2_legalise_terms_inner(node);
  }}

%%%%%%%%