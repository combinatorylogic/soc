###################################################################
# Project Configuration: 
# 
# Specify the name of the design (project) and the Quartus II
# Settings File (.qsf)
###################################################################

PROJECT = c2soc
TOP_LEVEL_ENTITY = c2soc
ASSIGNMENT_FILES = $(PROJECT).qpf $(PROJECT).qsf

###################################################################
# Part, Family, Boardfile
FAMILY = "CYCLONEV"
PART = 5CSEBA6U23I7
BOARDFILE = DE10Pins
###################################################################

###################################################################
# Setup your sources here
SRCS = ../rtl/soctop.v ./core.v ../rtl/regfile.v \
	altera.v \
	./i2c/I2C_HDMI_Config.v \
	./vgafifo.v \
	./vga640x480grey.v ./vgatop640x480grey.v \
	./vgatest.v \
	./vga1080p.v \
	../rtl/genqueue_misc.v ../rtl/gendelay1.v \
	../rtl/vmem24bit.v \
	./soc_system.qsys

###################################################################
# Main Targets
#
# all: build everything
# clean: remove output files and database
# program: program your device with the compiled design
###################################################################

# Settings File (.qsf)
###################################################################

PROJECT = c2soc
TOP_LEVEL_ENTITY = c2soc
ASSIGNMENT_FILES = $(PROJECT).qpf $(PROJECT).qsf

###################################################################
# Setup your sources here

###################################################################
# Main Targets
#
# all: build everything
# clean: remove output files and database
# program: program your device with the compiled design
###################################################################

all: core.v smart.log $(PROJECT).asm.rpt $(PROJECT).sta.rpt

ddr: DE10Pins_bigmem c2soc_bigmem.sdc
	rm -f DE10Pins c2soc.sdc
	cp DE10Pins_bigmem DE10Pins
	cp c2soc_bigmem.sdc c2soc.sdc

noddr: DE10Pins_bigmem c2soc_bigmem.sdc
	rm -f DE10Pins c2soc.sdc
	cp DE10Pins_noddr DE10Pins
	cp c2soc_noddr.sdc c2soc.sdc

clean:
	rm -rf *.rpt *.chg smart.log *.htm *.eqn *.pin *.sof *.pof db incremental_db core_*.v core.v DE10Pins c2soc.sdc

core.v: ../rtl/core.v ../../custom_out/c2_custom_hoist.v
	yosys -p "read_verilog -I../../custom_out -I../rtl/ -I. -ppdump ../rtl/core.v" > core_tmp.v
	sed -n '/-- Verilog code after preprocessor --/,/-- END OF DUMP --/p' core_tmp.v > core_tmp1.v
	tail -n +2 core_tmp1.v > core_tmp2.v
	head -n -1 core_tmp2.v > core_tmp3.v
	grep -v '`' core_tmp3.v > core.v


map: smart.log $(PROJECT).map.rpt
fit: smart.log $(PROJECT).fit.rpt
asm: smart.log $(PROJECT).asm.rpt
sta: smart.log $(PROJECT).sta.rpt
smart: smart.log

###################################################################
# Executable Configuration
###################################################################

MAP_ARGS = --read_settings_files=on $(addprefix --source=,$(SRCS))

FIT_ARGS = --part=$(PART) --read_settings_files=on
ASM_ARGS =
STA_ARGS =

###################################################################
# Target implementations
###################################################################

STAMP = echo done >

$(PROJECT).map.rpt: map.chg $(SOURCE_FILES) 
	quartus_map $(MAP_ARGS) $(PROJECT)
	$(STAMP) fit.chg

$(PROJECT).fit.rpt: fit.chg $(PROJECT).map.rpt
	quartus_fit $(FIT_ARGS) $(PROJECT)
	$(STAMP) asm.chg
	$(STAMP) sta.chg

$(PROJECT).asm.rpt: asm.chg $(PROJECT).fit.rpt
	quartus_asm $(ASM_ARGS) $(PROJECT)

$(PROJECT).sta.rpt: sta.chg $(PROJECT).fit.rpt
	quartus_sta $(STA_ARGS) $(PROJECT) 

smart.log: $(ASSIGNMENT_FILES)
	quartus_sh --determine_smart_action $(PROJECT) > smart.log

###################################################################
# Project initialization
###################################################################

$(ASSIGNMENT_FILES): core.v
	quartus_sh --prepare -f $(FAMILY) -t $(TOP_LEVEL_ENTITY) $(PROJECT)
	echo "" >> $(PROJECT).qsf
	cat $(BOARDFILE) >> $(PROJECT).qsf
map.chg:
	$(STAMP) map.chg
fit.chg:
	$(STAMP) fit.chg
sta.chg:
	$(STAMP) sta.chg
asm.chg:
	$(STAMP) asm.chg

###################################################################
# Programming the device
###################################################################

program: $(PROJECT).sof
	quartus_pgm --no_banner --mode=jtag -o "P;$(PROJECT).sof"

soc_system.rbf: $(PROJECT).sof
	quartus_cpf -c -o bitstream_compression=on $(PROJECT).sof soc_system.rbf

## To be executed from the ECD shell
##
## The file bsp_settings.txt is generated by running the following:
##
##   bsp-query-settings --settings settings.bsp --get-all --show-names | sed -e "s/^\(.*\)\s\(.*\)$/--set \1 \"\2\" \\\/"
##
## The first settings.bsp is generated via a bsp-editor GUI flow.
## 
## After executing bsp.sh, do the following in software/spl_bsp:
##  /usr/bin/make && /usr/bin/make uboot
##  cat preloader-mkpimage.bin uboot-socfpga/u-boot.img > preloader.img
## Then write the resulting image to an 0xA2 partition on your sd card.
##
## Also, the contents of the fat partition of this sd card should be the following:
##
##   - soc_system.rbf - the one produced by this makefile
##   - u-boot.scr: made from u-boot.script
##      // The most important part here is: 'run bridge_enable_handoff;'
##

u-boot.scr: u-boot.script
	mkimage  -A arm -O linux -T script -C none -a 0 -e 0 -n "My script" -d u-boot.script u-boot.scr

bsp.sh:	$(PROJECT).sof
	echo "bsp-create-settings --bsp-dir ./software/spl_bsp --preloader-settings-dir ./hps_isw_handoff/soc_system_ddr3_hps --settings ./software/spl_bsp/settings.bsp  \\" > bsp.sh
	echo " --type spl \\" >> bsp.sh
	cat bsp_settings.txt >> bsp.sh
	echo "" >> bsp.sh

